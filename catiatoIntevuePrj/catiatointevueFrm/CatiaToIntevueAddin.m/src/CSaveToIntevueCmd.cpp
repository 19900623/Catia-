//===================================================================
// COPYRIGHT HUSTCAD 2018/12/01
//===================================================================
// CSaveToIntevueCmd.cpp
// Header definition of class CSaveToIntevueCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2018/12/01 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CSaveToIntevueCmd.h"

#include "CATIPrdObject.h"
#include "CATFrmEditor.h"
#include "CATPathElement.h"
#include "CATIPLMProducts.h"
#include "CATIPLMComponent.h"
#include "CATPLMCoreType.h"
#include "CATIAdpType.h"
#include "CATCreateExternalObject.h" 
#include "CATListPtrCATIPLMComponent.h"
#include "CATPLMComponentInterfacesServices.h"

#include "CATDlgFile.h"
#include "CATApplicationFrame.h"


#ifndef _WINDOWS_
#include <afxwin.h>
#include <afxext.h>         // MFC extensions
#include <afxdisp.h>        // MFC Automation classes
#include <afxdtctl.h>		// MFC support for Internet Explorer 4 Common Controls
#ifndef _AFX_NO_AFXCMN_SUPPORT
#include <afxcmn.h>			// MFC support for Windows Common Controls
#endif // _AFX_NO_AFXCMN_SUPPORT
#else
#undef  _WINDOWS_
#include <afxwin.h>
#include <afxext.h>         // MFC extensions
#include <afxdisp.h>        // MFC Automation classes
#include <afxdtctl.h>		// MFC support for Internet Explorer 4 Common Controls
#ifndef _AFX_NO_AFXCMN_SUPPORT
#include <afxcmn.h>			// MFC support for Windows Common Controls
#endif // _AFX_NO_AFXCMN_SUPPORT
#define  _WINDOWS_
#endif

#include "CSaveHoops.h"
#include "CComFun.h"

static BOOL m_bStart=FALSE;

CATCreateClass(CSaveToIntevueCmd);
//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CSaveToIntevueCmd::CSaveToIntevueCmd() :
CATCommand (NULL, "CSaveToIntevueCmd")
{
	RequestStatusChange (CATCommandMsgRequestSharedMode);
	m_bStart=FALSE;

	
	CATApplicationFrame * pFrame = CATApplicationFrame::GetFrame();
	if(pFrame)
	{
		CATDlgWindow *pParent;
		pParent=pFrame->GetMainWindow();

		_dlgFile=new CATDlgFile(pParent,"选择输出的路径",CATDlgFolderChooser);
		CATUnicodeString usPath;
		usPath.BuildFromBSTR(CComFun::gstrOutputPath.AllocSysString());
		_dlgFile->SetDirectory(usPath);
		_dlgFile->SetVisibility(CATDlgShow);
		//当点击OK的时候就开始转换，否则就不转换了
		AddAnalyseNotificationCB(_dlgFile, 
			_dlgFile->GetDiaOKNotification(), 
			(CATCommandMethod)&CSaveToIntevueCmd::OpenOK, 
			NULL);

	}
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CSaveToIntevueCmd::~CSaveToIntevueCmd()
{
	//if (_dlgFile != NULL) 
	//	_dlgFile->RequestDelayedDestruction();
}


//  Overload this method: when your command gains focus
//
// Activates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC CSaveToIntevueCmd::Activate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
	//MessageBox(NULL,_T("CatiaToIntevueCmd Click "),_T("CatiaToIntevue"),MB_OK);
	//if(m_bStart==TRUE)
	//	return (CATStatusChangeRCCompleted);

	//m_bStart=TRUE;
	//HRESULT rc=S_OK;
	//CATIPLMComponent *pRoot=NULL;
	//pRoot=GetRootComponent();
	//if(pRoot!=NULL)
	//{
	//	CSaveHoops a;
	//	a.SaveToItnevue(pRoot);
	//}
	

	//pRoot=GetRootComponent();
	//CATIPLMComponent * pPLMComponent=NULL;
	//if(pRoot!=NULL)
	//{
	//	rc=pRoot->QueryInterface(IID_CATIPLMComponent,(void **)&pPLMComponent);
	//	if(SUCCEEDED(rc) && pPLMComponent)
	//	{
	//		CATIAdpType *pAdpType=NULL;
	//		rc=pPLMComponent->GetAdpType(pAdpType);
	//		if(SUCCEEDED(rc) && pAdpType)
	//		{
	//			CATPLMCoreType coreType;
	//			pAdpType->GetPLMCoreType(coreType);
	//			if(coreType==PLMCoreRepReference)
	//			{

	//			}
	//		}
	//	}
	//}
	m_bStart=FALSE;
	return (CATStatusChangeRCCompleted);
}

//  Overload this method: when your command loses focus
//
// Deactivates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC CSaveToIntevueCmd::Desactivate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
return (CATStatusChangeRCCompleted);
}

//  Overload this method: when your command is canceled
//
// Cancel a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC CSaveToIntevueCmd::Cancel( CATCommand * iFromClient, CATNotification * iEvtDat)
{
RequestDelayedDestruction();
return (CATStatusChangeRCCompleted);
}

CATIPLMComponent  *CSaveToIntevueCmd::GetRootComponent()
{
	
	CATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();
	if (NULL == pEditor)
	{
		return NULL;
	}

	CATListPtrCATIPLMComponent ListEditedRoot ;
	CATPLMComponentInterfacesServices::GetEditedRootPLMComponents(pEditor,ListEditedRoot) ;

	

	// We work with the first root - 
	// it is an implementative choice of our command
	//
	CATIPLMComponent *pTheFirstRoot= NULL ;
	if ( ListEditedRoot.Size() != 0 )
	{
		pTheFirstRoot =  ListEditedRoot[1];
	}
	//for(int i=1;i<=ListEditedRoot.Size();i++)
	//{
	//	CATUnicodeString usClassName=ListEditedRoot[i]->ClassName();
	//	MessageBox(NULL,usClassName,_T(""),MB_OK);
	//	
	//}

	//CATBaseUnknown *pComponent=pTheFirstRoot;
	//GetRootProduct (&pComponent);
	return pTheFirstRoot;
}
//-----------------------------------------------------------------------------
// GetRootProduct,得到根节点
//-----------------------------------------------------------------------------
HRESULT CSaveToIntevueCmd::GetRootProduct (CATBaseUnknown ** opRootProduct)
{
	HRESULT rc = E_INVALIDARG;
	if(NULL == opRootProduct)  return rc;

	CATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();
	if (NULL != pEditor)
	{
		CATPathElement UIActivePath = pEditor -> GetUIActiveObject();
		CATBaseUnknown * pActiveProduct = (CATBaseUnknown*) (UIActivePath.FindElement(IID_CATIPLMProducts));
		if(NULL != pActiveProduct)
		{
			CATIPrdObject * piRootPrdObject = NULL;
			rc = pActiveProduct -> QueryInterface(IID_CATIPrdObject, (void **)&piRootPrdObject);     
			if (SUCCEEDED(rc))
			{
				rc = piRootPrdObject -> GetReferenceObject ((CATBaseUnknown*&)*opRootProduct, IID_CATBaseUnknown);
				piRootPrdObject->Release();
				piRootPrdObject = NULL;
			}
			pActiveProduct->Release();
			pActiveProduct = NULL;
		}
		else
		{
			rc = E_FAIL;
		}
	}  
	return rc;
} 








void CSaveToIntevueCmd::OpenOK(CATCommand           * iSendingCommand, 
	CATNotification      * iSentNotification, 
	CATCommandClientData   iUsefulData)
{
	CATUnicodeString usPath;
	_dlgFile->GetDirectory(usPath);	
	_dlgFile->RequestDelayedDestruction(); //删除这个对话框

	CString strSelectPath;
	strSelectPath=usPath.ConvertToChar();
	if(PathFileExists(strSelectPath)==TRUE) //如果这个路径存在就用这个路径；
	{
		CComFun::gstrOutputPath=strSelectPath;
	}
	
	//开始转换
	HRESULT rc=S_OK;
	CATIPLMComponent *pRoot=NULL;
	pRoot=GetRootComponent();
	if(pRoot!=NULL)
	{
		CSaveHoops a;
		a.SaveToItnevue(pRoot);
	}

	this->RequestDelayedDestruction();//需要结束这个命令；
}