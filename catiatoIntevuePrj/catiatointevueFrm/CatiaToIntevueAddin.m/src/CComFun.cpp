//===================================================================
// COPYRIGHT HUSTCAD 2018/12/07
//===================================================================
// CComFun.cpp
// Header definition of class CComFun
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2018/12/07 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CATUnicodeString.h"
#include "CATDialog.h"
#include "CATDlgFile.h"

#include "CATIAlias.h"
#include "CATBaseUnknown.h"
#include "CATINavigateObject.h"
#include "CATIPLMProducts.h"
#include "CATIPLMRepInstances.h"
#include "CATIPLMRepresentations.h"
#include "CATIPrdObject.h"
#include "CATIMovable.h"
#include "CATMathTransformation.h"
#include "CATIPsiRepresentationReference.h"
#include "CATIPLMNavRepInstance.h"
#include "CATIPLMNavRepReference.h"
#include "CATIDftDrawing.h"
#include "CATIAdpType.h"
#include "CATPLMCoreType.h"
#include "CATDieImportExportServices.h"
#include "CATIPsiRepresentationLoadMode.h"
#include "CATIPLMNavInstance.h"
#include "CATICkeObject.h"
#include "CATListValCATAttributeInfos.h"   "
#include "CATCkePLMNavPublicServices.h"
#include "CATAttributeInfos.h"
#include "CATCkeObjectAttrReadServices.h"
#include "CATIMmiPrtContainer.h"





#include "CComFun.h"

CString CComFun::gstrOutputPath=_T("g:\\");
BOOL CComFun::gbOutputStep=FALSE;
float CComFun::gfChord=1.0;
BOOL CComFun::gbOutputPmi=FALSE; //输出PMI目前默认为FALSE
BOOL CComFun::gbFromGraph=TRUE;






CMapPtrToWord gmapHasprocess;	

//-----------------------------------------------------------------------------
// CComFun : constructor
//-----------------------------------------------------------------------------
CComFun::CComFun()
{
//
//TODO: Add the constructor code here
//
}

//-----------------------------------------------------------------------------
// CComFun : destructor
//-----------------------------------------------------------------------------

CComFun::~CComFun()
{
//
// TODO: Place code here.
//
}

CATUnicodeString CComFun::GetInputDirectory(CATDialog *pParent)
{
	TCHAR			szFolderPath[MAX_PATH] = {0};
	CString			strFolderPath = TEXT("");

	BROWSEINFO		sInfo;
	::ZeroMemory(&sInfo, sizeof(BROWSEINFO));
	sInfo.pidlRoot   = 0;
	sInfo.lpszTitle   = _T("请选择一个文件夹：");
	sInfo.ulFlags   = BIF_DONTGOBELOWDOMAIN | BIF_RETURNONLYFSDIRS | BIF_NEWDIALOGSTYLE | BIF_EDITBOX;
	sInfo.lpfn     = NULL;

	// 显示文件夹选择对话框
	LPITEMIDLIST lpidlBrowse = ::SHBrowseForFolder(&sInfo); 
	if (lpidlBrowse != NULL)
	{
		// 取得文件夹名
		if (::SHGetPathFromIDList(lpidlBrowse,szFolderPath))  
		{
			strFolderPath = szFolderPath;
		}
	}
	if(lpidlBrowse != NULL)
	{
		::CoTaskMemFree(lpidlBrowse);
	}
	CATUnicodeString usDirectory;
	usDirectory.BuildFromBSTR(strFolderPath.AllocSysString());
	if(PathFileExists(strFolderPath))
		gstrOutputPath=strFolderPath;

	//CATDlgFile *dlgSelectDir=new CATDlgFile(pParent,"SelectDir",CATDlgWndModal|CATDlgFolderChooser);
	//dlgSelectDir->SetTitle(CATUnicodeString("选择输出目录"));
	//dlgSelectDir->SetDirectory(CATUnicodeString("k:\\"));
	//
	//dlgSelectDir->SetVisibility(CATDlgShow);

	////dlgSelectDir.DisplayBlocked();
	//CATUnicodeString usDirectory;
	//dlgSelectDir->GetDirectory(usDirectory);
	//gstrOutputPath=usDirectory.ConvertToChar();
	return usDirectory;
}

void CComFun::NavigateObject(CATBaseUnknown_var spObject)
{
	CATIAlias_var as;
	CATBaseUnknown_var base;
	if (spObject!=NULL_var)
	{
		as=spObject;
		TCHAR cName[100];
		as->GetAlias().ConvertToWChar(cName);
		AfxMessageBox(cName);
		//cout<<as->GetAlias().ConvertToChar()<<endl;
		CATINavigateObject_var piNavi=spObject->QueryInterface("CATINavigateObject");
		if (piNavi!=NULL) {
			CATListValCATBaseUnknown_var *childList;
			childList=piNavi->GetChildren();
			for (int i=1;i<=childList->Size();i++)
			{
				base=(*childList)[i];
				NavigateObject(base);
			}
		}
	}
}
 void CComFun::TestComponent(CATIPLMComponent * pComponent)
{
	CATIPLMProducts_var pProducts;
	pProducts=pComponent;
	CATIPLMRepInstances_var pRepInstances;
	pRepInstances=pComponent;
	CATIPLMRepresentations_var pRep;
	pRep=pComponent;

	CString strTemp=_T("");
	if(pProducts==NULL_var) strTemp+=_T("products =NULL \n");
	else
	{
		strTemp+=_T("products =Ok \n");
		int iChildCount=0;
		pProducts->Count(iChildCount);
		CString str;
		str.Format(_T("%d"),iChildCount);
		strTemp+=_T("Child count="+str+_T("\n"));
		if(iChildCount>0) //这个是装配体，继续向下遍历
		{
			CATIPrdIterator *PrdIter=NULL;
			pProducts->Iterator(PrdIter);
			CATBaseUnknown_var pNext;
			while(SUCCEEDED(PrdIter->Next(pNext)))
			{
				CATIPrdObject_var pPrd=pNext;
				if(pPrd!=NULL_var)
				{
					if(pPrd->IsReference()) //这个是参考
					{
						AfxMessageBox(_T("ref"));
					}
					else //这个是实例
					{
						AfxMessageBox(_T("no ref"));
					}
				}
			}
		}
	}

	if(pRepInstances==NULL_var) strTemp+=_T("repInstances =NULL \n");
	else 
	{
			strTemp+=_T("repInstances =Ok \n");
			int iChildCount=0;
			pRepInstances->Count(iChildCount);
			CString str;
			str.Format(_T("%d"),iChildCount);
			strTemp+=_T("Child count="+str+_T("\n"));

	}

	if(pRep==NULL_var)strTemp+=_T("rep =NULL \n");
	else 
	{
			strTemp+=_T("rep =Ok \n");
			int iChildCount=0;
			pRep->Count(iChildCount);
			CString str;
			str.Format(_T("%d"),iChildCount);
			strTemp+=_T("Child count="+str+_T("\n"));

	}
	
	AfxMessageBox(strTemp);
}

BOOL CComFun::IsPart(CATIPLMComponent *pComponent)
{
	CATIPLMProducts_var pProducts=pComponent;
	if(pProducts==NULL)
		return FALSE;

	HRESULT rc;

	CATIPLMRepInstances_var spRepInstOnOccurrence = pComponent;  
	if(spRepInstOnOccurrence!=NULL_var)
	{
		CATIPrdIterator * piIteratorOnOccurrence = NULL;
		rc = spRepInstOnOccurrence -> Iterator (piIteratorOnOccurrence);
		if(piIteratorOnOccurrence!=NULL)
		{
			CATBaseUnknown * piBUonRepInstance = NULL;
			piIteratorOnOccurrence -> Next(piBUonRepInstance);
			if(piBUonRepInstance!=NULL)
			{
				CATIPLMNavRepInstance_var spNavRepInstance = piBUonRepInstance;
				if(spNavRepInstance!=NULL_var)
				{
					CATIPsiRepresentationReference_var spRepReference;
					CATIPLMNavRepReference * piNavRepReference = NULL;
					rc = spNavRepInstance -> GetRepReferenceInstanceOf (piNavRepReference);
					if(piNavRepReference!=NULL)
					{
						spRepReference=piNavRepReference;
						if(spRepReference!=NULL_var)
						{
							CATUnicodeString usType;
							rc=spRepReference->GetMainDataType(usType);
							if(SUCCEEDED(rc))
							{
								if(usType.Compare(CATUnicodeString("CATPart"))>0)
									return TRUE;
							}
						}
					}
				}
			}
		}
	}
	//其他的情况

	return FALSE;
}
BOOL CComFun::isAsm(CATIPLMComponent *pComponent)
{
	if(IsPart(pComponent)==FALSE)
	{
		CATIPLMProducts_var pProducts=pComponent;
		if(pProducts==NULL)
			return FALSE;
		int iChildCount=0;
		pProducts->Count(iChildCount);
		if(iChildCount>0)
			return TRUE;
		return FALSE;
	}
	return FALSE;
}
BOOL CComFun::isDrawing(CATIPLMComponent *pComponent)
{
	CATIPsiRepresentationReference_var spRepRef;
	spRepRef=pComponent;
	CATUnicodeString usDataType;
	if(spRepRef!=NULL_var)
	{
		spRepRef->GetMainDataType(usDataType);
		if(usDataType.Compare("CATDrawing")>0)
			return TRUE;
	}
	return FALSE;
}
//得到装配文件的安装位置
BOOL CComFun::GetInstanceTranf(CATIPLMProducts *pIntstance,double *dMatrixOutput)
{
	HRESULT rc;
	CATIMovable *piMovable = NULL;
	rc = pIntstance->QueryInterface(IID_CATIMovable, (void **) &piMovable);
	if (FAILED(rc) || NULL == piMovable)
	{
		return FALSE;
	}
	CATMathTransformation position;
	CATIMovable *iPosObj = NULL;
	position = piMovable->GetPosition(iPosObj);
	if (FAILED(rc))
		return FALSE;
	int i,j;
	double trans[3], rotate[3][3];	//变换矩阵
	for( i=0; i<3; i++ )
	{
		for( j=0; j<3; j++ )
			rotate[i][j] = 0;
		trans[i] = 0;
		rotate[i][i] = 1;
	}

	double array[12];
	position.GetCoef(array);
	memcpy( rotate[0], array, sizeof(double)*9 );
	memcpy( trans, &array[9], sizeof(double)*3 );

	piMovable->Release();
	piMovable = NULL;

	double dMatrix[4][4];
	int i1,i2;
	for(i1=0;i1<4;i1++)
		for(i2=0;i2<4;i2++)
		{
			dMatrix[i1][i2]=0;
		}
		for(i1=0;i1<3;i1++)
		{
			for(i2=0;i2<3;i2++)
			{
				dMatrix[i1][i2]=rotate[i1][i2];
			}
			dMatrix[3][i1]=trans[i1];
		}
		dMatrix[3][3]=1;

		memcpy(dMatrixOutput,dMatrix,sizeof(double)*16);
	return TRUE;
}
CString CComFun::GetLocalPath(CATIPLMComponent *pComponent)
{
	if(pComponent==NULL)
		return _T("");
	CString strName;
	strName=GetObjName(pComponent);
	strName.Replace(_T("\\"),_T(""));
	strName.Replace(_T("/"),_T(""));
	strName.Replace(_T(":"),_T(""));
	strName.Replace(_T("*"),_T(""));
	strName.Replace(_T("?"),_T(""));
	strName.Replace(_T("\""),_T(""));
	strName.Replace(_T("<"),_T(""));
	strName.Replace(_T(">"),_T(""));
	strName.Replace(_T("|"),_T(""));

	return CComFun::gstrOutputPath+_T("\\")+strName;
}

time_t FileTimeToTime_t(const FILETIME &ft)  
{  
	ULARGE_INTEGER ui;  
	ui.LowPart = ft.dwLowDateTime;  
	ui.HighPart = ft.dwHighDateTime;  
	return ((LONGLONG)(ui.QuadPart - 116444736000000000) / 10000000);  
}

int CComFun::GetIvpModifiedTime(CString ivpName)
{

//	SYSTEMTIME time;     
	CStdioFile file;
	BOOL ret = file.Open(ivpName,CFile::modeRead);
	if (ret)
	{
		FILETIME file_time;
		FILETIME locationtime;

		GetFileTime(file.m_hFile,NULL,NULL,&file_time);//获得文件修改时间
		FileTimeToLocalFileTime(&file_time,&locationtime);//将文件时间转换为本地文件时间
	    //FileTimeToSystemTime(&locationtime,&time);//将文件时间转换为本地系统时间
		//CString strTime;
		//strTime.Format(L"%4d%2d%2d%2d%2d",time.wYear,time.wMonth,time.wDay,time.wHour,time.wMinute);//利用CString的格式化语句格式化时间数据
		//time_t tt1 = FileTimeToTime_t(locationtime);  
		time_t tt = FileTimeToTime_t(file_time);  
		file.Close();
		return (int)(tt -0);  
	}
	else
	{
		return 0;
	}
		
}

BOOL CComFun::SetIvpModifiedTime(CString time,CString ivpPath)
{
	//SYSTEMTIME spec_time;
	FILETIME tempFT;
	LONGLONG LL;
	swscanf(time,L"%I64d",&LL);
	LONGLONG nLL = Int32x32To64(LL, 10000000) + 116444736000000000;
	tempFT.dwLowDateTime = (DWORD)nLL;
	tempFT.dwHighDateTime = (DWORD)(nLL >> 32);
//	FileTimeToSystemTime(&tempFT, &spec_time);
	
	// 获取文件句柄 
	HANDLE hFile = CreateFile(ivpPath, // LPCTSTR lpFileName
		GENERIC_READ|GENERIC_WRITE, // DWORD dwDesiredAccess, 
		FILE_SHARE_READ|FILE_SHARE_DELETE, 
		NULL, // LPSECURITY_ATTRIBUTES lpSecurityAttributes, 
		OPEN_EXISTING,
		FILE_FLAG_BACKUP_SEMANTICS, // DWORD dwFlagsAndAttributes, 
		NULL);
	if( hFile == INVALID_HANDLE_VALUE ) 
	{ 
		return FALSE; 
	} 
	// 设置文件时间 
//	FILETIME LocalFileTime; 
//	SystemTimeToFileTime(&spec_time, &ft); 
//	FileTimeToLocalFileTime(&tempFT,&LocalFileTime);
	if(SetFileTime(hFile,&tempFT,(LPFILETIME) NULL,&tempFT)) 
	{ 
		CloseHandle(hFile);
		return TRUE;
	}
	else
	{ 
		CloseHandle(hFile);
		return FALSE;
	} 
	return TRUE;
}

CString CComFun::GetCatiaModifiedTime(CATBaseUnknown * ipOccurrence)
{
	HRESULT rc = E_INVALIDARG;
	CATIMmiPrtContainer *opiPrtContainer=NULL;
	// Check input parameters
	if (NULL != ipOccurrence )
	{
		// Initializations
		rc = S_OK;

		// Get iterator on occurences
		CATIPrdIterator * piIteratorOnOccurrence = NULL;
		CATIPLMRepInstances_var spRepInstOnOccurrence = ipOccurrence;
		if (NULL_var != spRepInstOnOccurrence)
			rc = spRepInstOnOccurrence->Iterator(piIteratorOnOccurrence);
		else rc = E_UNEXPECTED;

		// Get the mechanical container
		CATIMmiPrtContainer * piPrtContainer = NULL;
		if (SUCCEEDED(rc) && NULL != piIteratorOnOccurrence)
		{
			CATBaseUnknown * piBUonRepInstance = NULL;
			if (SUCCEEDED(piIteratorOnOccurrence->Next(piBUonRepInstance)) && NULL != piBUonRepInstance && NULL == piPrtContainer)
			{
				// Get the representation reference
				CATIPsiRepresentationReference_var spRepReference;
				CATIPLMNavRepReference * piNavRepReference = NULL;
				CATIPLMNavRepInstance_var spNavRepInstance = piBUonRepInstance;
				if (NULL_var != spNavRepInstance)
				{
					rc = spNavRepInstance->GetRepReferenceInstanceOf(piNavRepReference);
					if (SUCCEEDED(rc))
					{
						CATICkeObject_var pCheckObj=piNavRepReference;
						spRepReference = piNavRepReference;

						if (NULL_var == pCheckObj) 
						{
							pCheckObj=spRepReference;
						}

						CATListValCATAttributeInfos ListOfAttributeInfos;
						CATCkePLMNavPublicServices::ListAttributesFromObject(CATCkePLMTypeAttrServices::All,
							pCheckObj,
							ListOfAttributeInfos,
							FALSE);
						if(ListOfAttributeInfos.Size()<=0)
							return "";
						CString value="";
						for(int i=1;i<=ListOfAttributeInfos.Size();i++)
						{
							CATAttributeInfos AttrInfo =  ListOfAttributeInfos[i];

							// A- Retrieve attribute name with a Call to CATAttributeInfos::Name
							CATUnicodeString attrName;
							attrName = AttrInfo.Name();
							CATUnicodeString stringValue;
							CATCkeObjectAttrReadServices ::GetValueAsString(pCheckObj,attrName,stringValue);
							CString attr=attrName.ConvertToChar();
							value=stringValue.ConvertToChar();
							if (attr=="C_modified")
							{
								break;
							}

						}
						ListOfAttributeInfos.RemoveAll();
						return value;
					}
				}
			}
		}
	}	
		return "";
}

CString CComFun::ToIntevueFile(CATIPLMComponent *pComponent)
{
	if(pComponent==NULL)
	{
		//AfxMessageBox(_T("Component is NULL"));
		return _T("");
	}
	CString strName;
	strName=GetObjName(pComponent);
	strName.Replace(_T("\\"),_T(""));
	strName.Replace(_T("/"),_T(""));
	strName.Replace(_T(":"),_T(""));
	strName.Replace(_T("*"),_T(""));
	strName.Replace(_T("?"),_T(""));
	strName.Replace(_T("\""),_T(""));
	strName.Replace(_T("<"),_T(""));
	strName.Replace(_T(">"),_T(""));
	strName.Replace(_T("|"),_T(""));
	if(IsPart(pComponent))	
		return gstrOutputPath+_T("\\")+strName+_T(".ivp");
	if(isAsm(pComponent))
		return gstrOutputPath+_T("\\")+strName+_T(".iva");
	if(isDrawing(pComponent))
		return gstrOutputPath+_T("\\")+strName+_T(".ivg");
	return _T("");
}
 CATUnicodeString CComFun::ToStepFile(CATIPLMComponent *pComponent)
{
	CString strName;
	strName=GetObjName(pComponent);
	
	CString strStep= gstrOutputPath+_T("\\")+strName+_T(".step");
	CATUnicodeString usStep;
	usStep.BuildFromBSTR(strStep.AllocSysString());
	return usStep;

}
CString CComFun::GetObjName(CATBaseUnknown *pObj)
{
	if(pObj==NULL)
		return _T("");
	CATIAlias_var sAlias=pObj;
	if(sAlias!=NULL_var)
	{
		CATUnicodeString usAlias = sAlias->GetAlias();
		CString strReturn =usAlias.ConvertToChar();
		return strReturn;
	}
	return _T("");
}
//初始化map，这个函数在转换之前调用
void CComFun::InitMap()
{
	gmapHasprocess.RemoveAll();//清理所有的数据
}
 //是否已经处理了零件
BOOL CComFun::HasProcess(CATIPLMComponent *pComponent)
{
	if(pComponent==NULL)
		return FALSE;
	CATIPLMProducts_var spProduct=pComponent;
	
	if(spProduct!=NULL_var)
	{
		CATIPLMProducts *pProduct;
		pProduct=spProduct;

		WORD dvalue;
		if(gmapHasprocess.Lookup(pProduct,dvalue)==TRUE)
			return TRUE;
		gmapHasprocess[pComponent]=1;
		return FALSE;
	}
	return FALSE;
}
void CComFun::InfoBaseUnkown(CATBaseUnknown *pBaseUnknow)
{
	if(pBaseUnknow==NULL)
		return ;
	CATBaseUnknown *pImpl=NULL;
	pImpl=pBaseUnknow->GetImpl();

	if(pImpl)
	{

	}

}
void CComFun::InfoComponent(CATIPLMComponent *pComponent)
{
	if(pComponent==NULL)
		return ;
	CATIAdpType *pAdpType=NULL;
	pComponent->GetAdpType(pAdpType);
	CATPLMCoreType oPlmType;
	CATUnicodeString usAlias;
	CATUnicodeString usPlmModeler;
	if(pAdpType)
	{			
		pAdpType->GetPLMCoreType(oPlmType);	
		pAdpType->GetPLMModeler(usPlmModeler);
		pAdpType->GetAlias(usAlias);
	}

	CATIPLMNavRepReference_var spNavRepReference;
	spNavRepReference=pComponent;
	CATIPsiRepresentationReference_var spRepRef;
	spRepRef=pComponent;
	CATUnicodeString usDataType;
	if(spRepRef!=NULL_var)
	{
		spRepRef->GetMainDataType(usDataType);
	}

	int iTemp=0;
}
CATBaseUnknown* CComFun::ImportDwgFile(CString strFileName)
{
	HRESULT rc;
	CATBaseUnknown *pPLMObject=NULL;
	CATDieImportExportServices * ServicesInstance = CATDieImportExportServices::GetInstance() ;
	if ( NULL != ServicesInstance )  //输出dxf
	{
		CATUnicodeString inputPath;
		inputPath.BuildFromBSTR(strFileName.AllocSysString());		
		CATUnicodeString InputUsage="DWG";
		rc = ServicesInstance->ImportExternalFileToPLMObject(
			inputPath ,
			InputUsage ,
			pPLMObject ) ;
		if(SUCCEEDED(rc))
		{
			//输出成功
			//AfxMessageBox(_T("导入成功！"));
		}
	}

	CATDieImportExportServices::DeleteInstance();

	if(SUCCEEDED(rc))
	{
		//输出成功
		//AfxMessageBox(_T("导入成功！"));
		return pPLMObject;
	}

	if ( FAILED(rc) )
	{
		CATError * pErrorMessage = CATError::CATGetLastError(rc) ;
		if (pErrorMessage)
		{
			CATUnicodeString usMsg=pErrorMessage->GetNLSMessage();
			AfxMessageBox(CString(usMsg.ConvertToChar()));
			pErrorMessage -> Release () ;
			pErrorMessage = NULL ;
		}
	}
	return NULL;
}
BOOL CComFun::ExportDwg(CATIPLMComponent *pComponent,CString strFileName)
{
	if(pComponent==NULL)
		return FALSE;
	HRESULT rc;
	CATIPsiRepresentationLoadMode *piRepLoadMode = NULL;
	if (pComponent &&  SUCCEEDED( pComponent->QueryInterface( IID_CATIPsiRepresentationLoadMode, (void **) & piRepLoadMode ) ) )
	{
		rc = piRepLoadMode->ChangeLoadingMode( CATIPsiRepresentationLoadMode::EditMode );
		piRepLoadMode->Release();piRepLoadMode=NULL;
	}	

	CATDieImportExportServices * ServicesInstance = CATDieImportExportServices::GetInstance() ;
	if ( NULL != ServicesInstance )  //输出dxf
	{
		CATUnicodeString OutputFilePath;
		OutputFilePath.BuildFromBSTR(strFileName.AllocSysString());
		CATUnicodeString OutputFileExtension="dwg";
		CATUnicodeString OutputUsage="DWG";
		rc = ServicesInstance->ExportPLMObjectToExternalFile ( pComponent ,
			OutputFilePath ,
			OutputFileExtension ,
			OutputUsage ) ;
		if(SUCCEEDED(rc))
		{
			//输出成功
			AfxMessageBox(_T("输出成功！"));
		}
	}

	CATDieImportExportServices::DeleteInstance();



	if ( FAILED(rc) )
	{
		CATError * pErrorMessage = CATError::CATGetLastError(rc) ;
		if (pErrorMessage)
		{
			CATUnicodeString usMsg=pErrorMessage->GetNLSMessage();
			AfxMessageBox(CString(usMsg.ConvertToChar()));
			pErrorMessage -> Release () ;
			pErrorMessage = NULL ;
			return FALSE;
		}
	}
	return TRUE;
}
CATBaseUnknown* CComFun::ImportStepFile(CString strFileName)
{
	HRESULT rc;
	CATBaseUnknown *pPLMObject=NULL;
	CATDieImportExportServices * ServicesInstance = CATDieImportExportServices::GetInstance() ;
	if ( NULL != ServicesInstance )  //输出dxf
	{
		CATUnicodeString inputPath;
		inputPath.BuildFromBSTR(strFileName.AllocSysString());		
		CATUnicodeString InputUsage="STEP";
		rc = ServicesInstance->ImportExternalFileToPLMObject(
			inputPath ,
			InputUsage ,
			pPLMObject ) ;
		if(SUCCEEDED(rc))
		{
			//输出成功
			//AfxMessageBox(_T("导入成功！"));
		}
	}

	CATDieImportExportServices::DeleteInstance();

	if(SUCCEEDED(rc))
	{
		//输出成功
		//AfxMessageBox(_T("导入成功！"));
		return pPLMObject;
	}

	if ( FAILED(rc) )
	{
		CATError * pErrorMessage = CATError::CATGetLastError(rc) ;
		if (pErrorMessage)
		{
			CATUnicodeString usMsg=pErrorMessage->GetNLSMessage();
			AfxMessageBox(CString(usMsg.ConvertToChar()));
			pErrorMessage -> Release () ;
			pErrorMessage = NULL ;
		}
	}
	return NULL;
}

//导出step文件
BOOL CComFun::ExportStep(CATIPLMComponent *pComponent,CString strFileName)
{
	if(pComponent==NULL)
		return FALSE;
	HRESULT rc;
	CATIPsiRepresentationLoadMode *piRepLoadMode = NULL;
	if (pComponent &&  SUCCEEDED( pComponent->QueryInterface( IID_CATIPsiRepresentationLoadMode, (void **) & piRepLoadMode ) ) )
	{
		rc = piRepLoadMode->ChangeLoadingMode( CATIPsiRepresentationLoadMode::EditMode );
		piRepLoadMode->Release();piRepLoadMode=NULL;
	}	

	CATDieImportExportServices * ServicesInstance = CATDieImportExportServices::GetInstance() ;
	if ( NULL != ServicesInstance )  //输出dxf
	{
		CATUnicodeString OutputFilePath;
		OutputFilePath.BuildFromBSTR(strFileName.AllocSysString());
		CATUnicodeString OutputFileExtension="stp";
		CATUnicodeString OutputUsage="STEP";
		rc = ServicesInstance->ExportPLMObjectToExternalFile ( pComponent ,
			OutputFilePath ,
			OutputFileExtension ,
			OutputUsage ) ;
		if(SUCCEEDED(rc))
		{
			//输出成功
			AfxMessageBox(_T("输出成功！"));
		}
	}

	CATDieImportExportServices::DeleteInstance();



	if ( FAILED(rc) )
	{
		CATError * pErrorMessage = CATError::CATGetLastError(rc) ;
		if (pErrorMessage)
		{
			CATUnicodeString usMsg=pErrorMessage->GetNLSMessage();
			CATUnicodeString usAdv=pErrorMessage->GetNLSAdvice();
			CATUnicodeString usDia=pErrorMessage->GetNLSDiagnostic();
			CATUnicodeString usReq=pErrorMessage->GetNLSRequest();
			//AfxMessageBox(CString(usMsg.ConvertToChar())+_T("\n")+
			//	CString(usDia.ConvertToChar())+_T("\n")+
			//	CString(usAdv.ConvertToChar())+_T("\n")+
			//	CString(usReq.ConvertToChar())+_T("\n")	);

			AfxMessageBox(CString(usMsg.ConvertToChar()));
			pErrorMessage -> Release () ;
			pErrorMessage = NULL ;
		}
	}
	return TRUE;
}